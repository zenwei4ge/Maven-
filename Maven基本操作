使用Maven构建项目
          打开控制台，进入到 pom.xml 文件所放的项目文件夹，并发出以下命令：
          mvn package
          这将执行Maven的“package”阶段
          当你运行“mvn package”命令，它会编译源代码，运行单元测试和包装这取决于在pom.xml文件的“packaging”标签
          1. If “packaging” = jar, 将您的项目打包成一个“jar”文件，并把它变成你的目标文件夹
              <modelVersion>4.0.0</modelVersion><groupId>com.yiibai</groupId><artifactId>Maven Example</artifactId>
              <packaging>jar</packaging> 
          2. 如果 “packaging” = war,将您的项目打包成“war”文件，并把它变成目标文件夹
              <modelVersion>4.0.0</modelVersion><groupId>com.yiibai</groupId><artifactId>Maven Example</artifactId>     
             <packaging>war</packaging> 
使用Maven清理项目
          在基于Maven的项目中，很多缓存输出在“target”文件夹中。如果想建立项目部署，必须确保清理所有缓存的输出，从面能够随时获得最新的部署
          要清理项目缓存的输出，发出以下命令：
          mvn clean
 使用Maven运行单元测试
          要通过Maven运行单元测试，发出此命令：
          mvn test
          这会在你的项目中运行整个单元测试
          创建两个单元测试，并通过 Maven 的运行它
                          package com.yiibai.core;

                          public class App {
                            public static void main(String[] args) {

                              System.out.println(getHelloWorld());

                            }

                            public static String getHelloWorld() {

                              return "Hello World";

                            }

                            public static String getHelloWorld2() {

                              return "Hello World 2";

                            }
                          }
                          
                          package com.yiibai.core;

                          import junit.framework.Assert;
                          import org.junit.Test;

                          public class TestApp1 {

                            @Test
                            public void testPrintHelloWorld() {

                              Assert.assertEquals(App.getHelloWorld(), "Hello World");

                            }

                          }
                          
                          
                          
                          package com.yiibai.core;

                          import junit.framework.Assert;
                          import org.junit.Test;

                          public class TestApp2 {

                            @Test
                            public void testPrintHelloWorld2() {

                              Assert.assertEquals(App.getHelloWorld2(), "Hello World 2");

                            }

                          }
                          运行整个单元测试(TestApp1和TestApp2)，发出以下命令：
                          mvn test
                          运行单个测试(TestApp1)，发出此命令：
                          mvn -Dtest=TestApp1 test
将项目安装到Maven本地资源库
                          可以使用“mvn install”打包项目，并自动部署到本地资源库，让其他开发人员使用它。
                          mvn install
生成基于Maven的项目文档站点
                          可以使用“mvn site”，为您的项目信息生成文档站点。
                          mvn site
                          生成的网站是在项目的“target/site”文件夹中
使用“mvn site-deploy”部署站点（WebDAV例子）
部署基于Maven的war文件到Tomcat
                          1. Tomcat 7 示例
                              这个例子说明了如何在Tomcat7打包并部署WAR文件。

                              1.1 Tomcat 认证
                              添加具有角色管理器GUI和管理脚本的用户。

                              %TOMCAT7_PATH%/conf/tomcat-users.xml
                              <?xml version='1.0' encoding='utf-8'?>
                              <tomcat-users>

                                <role rolename="manager-gui"/>
                                <role rolename="manager-script"/>
                                <user username="admin" password="password" roles="manager-gui,manager-script" />

                              </tomcat-users>
                              
                              1.2 Maven 认证
                                添加在上面Maven 设置文件的 Tomcat 用户，是之后Maven使用此用户来登录Tomcat服务器。

                                %MAVEN_PATH%/conf/settings.xml
                                <?xml version="1.0" encoding="UTF-8"?>
                                <settings ...>
                                  <servers>

                                    <server>
                                      <id>TomcatServer</id>
                                      <username>admin</username>
                                      <password>password</password>
                                    </server>

                                  </servers>
                                </settings>
                               1.3 Tomcat7 Maven 插件
                                   pom.xml

                                  <plugin>
                                    <groupId>org.apache.tomcat.maven</groupId>
                                    <artifactId>tomcat7-maven-plugin</artifactId>
                                    <version>2.2</version>
                                    <configuration>
                                      <url>http://localhost:8080/manager/text</url>
                                      <server>TomcatServer</server>
                                      <path>/yiibaiWebApp</path>
                                    </configuration>
                                  </plugin>
                               1.4 发布到Tomcat
                                  以下的命令是用来操纵Tomcat WAR文件。

                                  mvn tomcat7:deploy 
                                  mvn tomcat7:undeploy 
                                  mvn tomcat7:redeploy
                                  

                      




          
